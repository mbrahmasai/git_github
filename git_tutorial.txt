topics 
-------------
vcs & git repo 
staging area & commits
Branches
Issues & PRs
=====================


step 1 : initilization 
==========================
first time push code
----------------
git init  
git add . 
git status
git commit - m "first commit" 
git branch -M main 
git remote add origin https://github.com/mbrahmasai/git_github.git
git push -u origin main

==========================================
git add (working directory to staging area)
==============================================
| Command              | Description                                                                                      |
| -------------------- | ------------------------------------------------------------------------------------------------ |
| `git add .`          | Adds **all changes** (new, modified, deleted files) in the current directory and subdirectories. |
| `git add -A`         | Adds **all changes**, like `.` but also includes deleted files more explicitly.                  |
| `git add *`          | Adds all **untracked** and **modified files** in the current directory **(not subfolders)**.     |
| `git add index.html` | Stages a **specific file**.                                                                      |
| `git add folder/`    | Stages **all files inside a folder**.                                                           |

===============================================================
note : from working directory to stagging area , you option to add single file or all files or multliples 
from the stagging area to local  and  local to remote , you need to pass all files which are present.
==================================================================
git status
========================================
The git status command shows the state of the working directory and staging area.

| Section                                   | Description                                                   |
| ----------------------------------------- | ------------------------------------------------------------- |
| üî¥ `Changes not staged for commit`        | Modified files that need to be added with `git add`.          |
| üü¢ `Changes to be committed`              | Files that have been staged with `git add`, ready for commit. |
| ‚ö™ `Untracked files`                       | New files not yet tracked by Git. Add them with `git add`.    |
| ‚úÖ `Nothing to commit, working tree clean` | All changes are committed, nothing new.                       |

============================
git commit
=============================
The git commit command is used to save your staged changes to the Git repository history.

git commit -m "Your commit message"

-m specifies the message describing the changes.
The message should clearly explain what was changed and why.

| Command                      | Description                                                                                                  |
| ---------------------------- | ------------------------------------------------------------------------------------------------------------ |
| `git commit -m "message"`    | Commits staged changes with a message.                                                                       |
| `git commit`                 | Opens the default text editor to write a detailed commit message (if no `-m` is given).                      |
| `git commit -a -m "message"` | Automatically stages **all modified** (tracked) files and commits them. *(Untracked files are not included)* |
| `git commit --amend`         | Modify the last commit (e.g., to change the message or add more files).                                      |

======================================================================
git log
======================================================================
The git log command shows the commit history of your repository. It's useful for viewing past commits, who made them, and when.

| Command                        | Description                                                       |
| ------------------------------ | ----------------------------------------------------------------- |
| `git log`                      | Shows full commit history.                                        |
| `git log --oneline`            | Compact view: one line per commit.                                |
| `git log --graph`              | Visualizes the branch structure.                                  |
| `git log -p`                   | Shows changes (diffs) introduced in each commit.                  |
| `git log --stat`               | Shows summary of changes: which files changed and how many lines. |
| `git log --author="Your Name"` | Filters commits by author.                                        |
| `git log <file>`               | Shows commit history for a specific file.                         |

üßæ Examples

git log --oneline --graph
git log --stat
git log --author="Alice"
git log src/app.js



üñ±Ô∏è Bonus Tips While Inside git log:

| Key            | Action               |
| -------------- | -------------------- |
| `q`            | Quit/Exit            |
| `‚Üë / ‚Üì`        | Scroll up/down       |
| `SPACE`        | Scroll down one page |
| `b`            | Scroll back one page |
| `/search_term` | Search inside logs   |
==========================================================

